# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

from gui_functions import *

# global kenken_round instance to be used in the whole program
global kenkenObj
kenkenObj = kenken_round(1)

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        # intialize the kenken_round object when the user clicks the generate board button
        #self.kenkenObj : kenken_round
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(817, 590)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.mainGridLayout = QtWidgets.QGridLayout()
        self.mainGridLayout.setObjectName("mainGridLayout")
        self.chooseAlgoHorizontalLayout = QtWidgets.QHBoxLayout()
        self.chooseAlgoHorizontalLayout.setObjectName("chooseAlgoHorizontalLayout")
        self.chooseAlgoLabel = QtWidgets.QLabel(self.centralwidget)
        self.chooseAlgoLabel.setObjectName("chooseAlgoLabel")
        self.chooseAlgoHorizontalLayout.addWidget(self.chooseAlgoLabel)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.chooseAlgoHorizontalLayout.addItem(spacerItem)
        self.backtrackingRadioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.backtrackingRadioButton.setChecked(True)
        self.backtrackingRadioButton.setObjectName("backtrackingRadioButton")
        self.chooseAlgoHorizontalLayout.addWidget(self.backtrackingRadioButton)
        self.forwaredCheckingRadioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.forwaredCheckingRadioButton.setObjectName("forwaredCheckingRadioButton")
        self.chooseAlgoHorizontalLayout.addWidget(self.forwaredCheckingRadioButton)
        self.arcConsistencyRadioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.arcConsistencyRadioButton.setObjectName("arcConsistencyRadioButton")
        self.chooseAlgoHorizontalLayout.addWidget(self.arcConsistencyRadioButton)
        self.mainGridLayout.addLayout(self.chooseAlgoHorizontalLayout, 5, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.mainGridLayout.addItem(spacerItem1, 6, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.mainGridLayout.addItem(spacerItem2, 3, 0, 1, 1)
        self.solvePuzzlePushButton = QtWidgets.QPushButton(self.centralwidget)
        self.solvePuzzlePushButton.setObjectName("solvePuzzlePushButton")

        # When the user clicks the solve puzzle button, call the solvePuzzle function
        self.solvePuzzlePushButton.clicked.connect(self.solvePuzzle)

        # The user can only click the solve puzzle button if the board is generated
        self.solvePuzzlePushButton.setEnabled(False)


        self.mainGridLayout.addWidget(self.solvePuzzlePushButton, 7, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 41, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)
        self.mainGridLayout.addItem(spacerItem3, 1, 0, 1, 1)
        self.generateboardPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.generateboardPushButton.setObjectName("generateboardPushButton")

        self.generateboardPushButton.clicked.connect(self.generateBoard)
        self.mainGridLayout.addWidget(self.generateboardPushButton, 2, 0, 1, 1)
        self.boardSizeHorizontalLayout = QtWidgets.QHBoxLayout()
        self.boardSizeHorizontalLayout.setObjectName("boardSizeHorizontalLayout")
        self.enterBoardSizeLabel = QtWidgets.QLabel(self.centralwidget)
        self.enterBoardSizeLabel.setObjectName("enterBoardSizeLabel")
        self.boardSizeHorizontalLayout.addWidget(self.enterBoardSizeLabel)
        self.boardSizeLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.boardSizeLineEdit.setObjectName("boardSizeLineEdit")

        # if textline is updated, disable the solve button
        self.boardSizeLineEdit.textChanged.connect(self.disableSolveButton)
        self.boardSizeLineEdit.returnPressed.connect(self.getBoardSize)
        self.boardSizeHorizontalLayout.addWidget(self.boardSizeLineEdit)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.boardSizeHorizontalLayout.addItem(spacerItem4)
        self.mainGridLayout.addLayout(self.boardSizeHorizontalLayout, 0, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.mainGridLayout.addItem(spacerItem5, 8, 0, 1, 1)
        self.gridLayout_3.addLayout(self.mainGridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 817, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.chooseAlgoLabel.setText(_translate("MainWindow", "Choose the algorithm that will solve the puzzle:"))
        self.backtrackingRadioButton.setText(_translate("MainWindow", "BackTracking"))
        self.forwaredCheckingRadioButton.setText(_translate("MainWindow", "Forwared checking"))
        self.arcConsistencyRadioButton.setText(_translate("MainWindow", "Arc Consistency"))
        self.solvePuzzlePushButton.setText(_translate("MainWindow", "Solve the puzzle"))
        self.generateboardPushButton.setText(_translate("MainWindow", "Generate random board"))
        self.enterBoardSizeLabel.setText(_translate("MainWindow", "Enter board size (eg. 3): "))

    # Show an error message to the user
    # The message is passed as a parameter
    def errorMessage(self, message):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(message)
        msg.setWindowTitle("Error")
        msg.exec_()    


    # Get the board size from the user
    # If the user entered a number, set the board size to that number
    # If the user entered a string, show an error message that the user must enter a number
    # If the user entered nothing, show an error message that the user must enter a number
    # If the user entered a number that is not an integer, show an error message that the user must enter an integer
    # If the user entered a number that is less than 1, show an error message that the board size must be at least 1
    def getBoardSize(self):
        try:
            boardSize = int(self.boardSizeLineEdit.text())
            if boardSize > 0:
                return boardSize
            else:
                self.errorMessage("The board size must be at least 1")
        except ValueError:
            self.errorMessage("You must enter a number")
        except TypeError:
            self.errorMessage("You must enter a number")

        

    # Get the board size from the user and save it to the boardSize variable
    # Then, generate a random board with the board size that the user entered using the play_kenken_round function from the gui file
    def generateBoard(self):
        round_size=self.getBoardSize()
        # Check if round_size is a number, then run the play_kenken_round function
        if round_size is not None:
            self.solvePuzzlePushButton.setEnabled(True)
            global kenkenObj
            kenkenObj = kenken_round(size=round_size)
            kenkenObj.draw_kenken_round()

    # Implement solvePuzzle function
    # If the user selected the BackTracking algorithm, call the draw_board_answer_integration function from from kenekenObj with entered_inference = csp.no_inference
    # If the user selected the Forwared Checking algorithm, call the draw_board_answer_integration function from from kenekenObj with entered_inference = csp.forward_checking
    # If the user selected the Arc Consistency algorithm, call the draw_board_answer_integration function from from kenekenObj with entered_inference = csp.make_arc_consistency
    def solvePuzzle(self):
        global kenkenObj
        if self.backtrackingRadioButton.isChecked():       
            kenkenObj.draw_board_answer_integration(entered_inference=csp.no_inference)
        elif self.forwaredCheckingRadioButton.isChecked():
            kenkenObj.draw_board_answer_integration(entered_inference=csp.forward_checking)
        elif self.arcConsistencyRadioButton.isChecked():
            kenkenObj.draw_board_answer_integration(entered_inference=csp.make_arc_consistency)


    # Disable the solvePuzzlePushButton
    def disableSolveButton(self):
        self.solvePuzzlePushButton.setEnabled(False)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
